{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Projectile Motion: Analysis of Range Dependence on Launch Angle 1. Theoretical Foundation Projectile motion is governed by Newton\u2019s laws. Assuming no air resistance, the motion can be described using kinematic equations: Horizontal motion: \\[ x = v_0 \\cos(\\theta) \\cdot t \\] Vertical motion: \\[ y = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 \\] The total time of flight is found by solving for when the projectile returns to its initial height: \\[ t_f = \\frac{2 v_0 \\sin(\\theta)}{g} \\] The horizontal range is given by: \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] 2. Analysis of the Range The horizontal range depends on: Launch Angle ( \\(\\theta\\) ) : The range is maximized at \\( 45^\\circ \\) . Initial Velocity ( \\(v_0\\) ) : Higher velocity increases range quadratically. Gravitational Acceleration (g): A stronger gravitational field decreases range. 3. Practical Applications Sports: Understanding ball trajectories in football and basketball. Engineering: Designing projectile-based systems like rockets or artillery. Astrophysics: Studying planetary motion under different gravity levels. Gymnastics: I did gymnastics for about 4.5 years, and even though I stopped, I still remember how much things like angle and push-off mattered during flips and vaults. Now that I\u2019m learning the physics behind it, it all makes a lot more sense. 4. Implementation: Python Simulation We use Python to visualize how range varies with launch angle. import numpy as np import matplotlib.pyplot as plt def projectile_range(v0, g): angles = np.linspace(0, 90, 100) # Angles in degrees angles_rad = np.radians(angles) # Convert to radians ranges = (v0**2 * np.sin(2 * angles_rad)) / g plt.figure(figsize=(8,5)) plt.plot(angles, ranges, label=f'v0 = {v0} m/s') plt.xlabel('Launch Angle (degrees)') plt.ylabel('Range (m)') plt.title('Projectile Range vs. Launch Angle') plt.legend() plt.grid() plt.show() # Example parameters v0 = 20 # Initial velocity in m/s g = 9.81 # Gravity in m/s^2 projectile_range(v0, g) #### Range at Selected Launch Angles This graph shows how the horizontal range changes for selected launch angles (0\u00b0, 15\u00b0, ..., 90\u00b0). The range is maximized at 45\u00b0, and symmetric angles give equal ranges (like 30\u00b0 and 60\u00b0). Full Range vs. Launch Angle Plot This plot provides a smoother, continuous look at how launch angle affects range. It complements the previous graph by showing the full curve instead of selected angles. Range vs Initial Velocity at 45\u00b0 This graph shows how the range increases quadratically as the initial velocity increases, with a fixed launch angle of 45\u00b0. import numpy as np import matplotlib.pyplot as plt def range_vs_velocity(theta_deg, g): velocities = np.linspace(1, 50, 100) theta_rad = np.radians(theta_deg) ranges = (velocities**2 * np.sin(2 * theta_rad)) / g plt.figure(figsize=(8,5)) plt.plot(velocities, ranges) plt.xlabel('Initial Velocity (m/s)') plt.ylabel('Range (m)') plt.title(f'Range vs Initial Velocity at {theta_deg}\u00b0') plt.grid() plt.savefig(\"range_vs_velocity.png\", dpi=300) plt.show() range_vs_velocity(45, 9.81) Gymnastics-Style Jump (Simplified Example) import math # Gymnastics jump simulation v0 = 4 # initial velocity (m/s) angle = 50 # launch angle (degrees) g = 9.81 # gravity (m/s^2) theta = math.radians(angle) t = (2 * v0 * math.sin(theta)) / g R = (v0**2 * math.sin(2 * theta)) / g print(\"Time in air:\", round(t, 2), \"s\") print(\"Distance:\", round(R, 2), \"m\") # Calculate maximum height h_max = (v0**2 * math.sin(theta)**2) / (2 * g) print(\"Maximum height:\", round(h_max, 2), \"m\") This is a short example of how angle and velocity affect the flight time and distance of a jump, like in gymnastics. 5. Discussion on Limitations Air Resistance: In real scenarios, drag significantly reduces range. Uneven Terrain: Changes in landing elevation affect results. Wind Influence: Can alter trajectory unpredictably. 6. Examples Figure 1: Illustration showing how launch angle and velocity affect the range of projectile motion. Figure 2: Simulated projectile paths at 45\u00b0 launch angle with different initial velocities. Figure 3: Simulated projectile paths at 15,45,75\u00b0 launch angle with different initial velocities. Conclusion This analysis demonstrates the relationship between launch angle and range, emphasizing its significance in various real-world applications. It also helped me connect what I\u2019m learning now to the years I spent doing gymnastics. Future studies can include more realistic factors like air resistance and body posture during motion. visit my colab","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#projectile-motion-analysis-of-range-dependence-on-launch-angle","text":"","title":"Projectile Motion: Analysis of Range Dependence on Launch Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"Projectile motion is governed by Newton\u2019s laws. Assuming no air resistance, the motion can be described using kinematic equations: Horizontal motion: \\[ x = v_0 \\cos(\\theta) \\cdot t \\] Vertical motion: \\[ y = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 \\] The total time of flight is found by solving for when the projectile returns to its initial height: \\[ t_f = \\frac{2 v_0 \\sin(\\theta)}{g} \\] The horizontal range is given by: \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\]","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"The horizontal range depends on: Launch Angle ( \\(\\theta\\) ) : The range is maximized at \\( 45^\\circ \\) . Initial Velocity ( \\(v_0\\) ) : Higher velocity increases range quadratically. Gravitational Acceleration (g): A stronger gravitational field decreases range.","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"Sports: Understanding ball trajectories in football and basketball. Engineering: Designing projectile-based systems like rockets or artillery. Astrophysics: Studying planetary motion under different gravity levels. Gymnastics: I did gymnastics for about 4.5 years, and even though I stopped, I still remember how much things like angle and push-off mattered during flips and vaults. Now that I\u2019m learning the physics behind it, it all makes a lot more sense.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation-python-simulation","text":"We use Python to visualize how range varies with launch angle. import numpy as np import matplotlib.pyplot as plt def projectile_range(v0, g): angles = np.linspace(0, 90, 100) # Angles in degrees angles_rad = np.radians(angles) # Convert to radians ranges = (v0**2 * np.sin(2 * angles_rad)) / g plt.figure(figsize=(8,5)) plt.plot(angles, ranges, label=f'v0 = {v0} m/s') plt.xlabel('Launch Angle (degrees)') plt.ylabel('Range (m)') plt.title('Projectile Range vs. Launch Angle') plt.legend() plt.grid() plt.show() # Example parameters v0 = 20 # Initial velocity in m/s g = 9.81 # Gravity in m/s^2 projectile_range(v0, g) #### Range at Selected Launch Angles This graph shows how the horizontal range changes for selected launch angles (0\u00b0, 15\u00b0, ..., 90\u00b0). The range is maximized at 45\u00b0, and symmetric angles give equal ranges (like 30\u00b0 and 60\u00b0).","title":"4. Implementation: Python Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#full-range-vs-launch-angle-plot","text":"This plot provides a smoother, continuous look at how launch angle affects range. It complements the previous graph by showing the full curve instead of selected angles.","title":"Full Range vs. Launch Angle Plot"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range-vs-initial-velocity-at-45","text":"This graph shows how the range increases quadratically as the initial velocity increases, with a fixed launch angle of 45\u00b0. import numpy as np import matplotlib.pyplot as plt def range_vs_velocity(theta_deg, g): velocities = np.linspace(1, 50, 100) theta_rad = np.radians(theta_deg) ranges = (velocities**2 * np.sin(2 * theta_rad)) / g plt.figure(figsize=(8,5)) plt.plot(velocities, ranges) plt.xlabel('Initial Velocity (m/s)') plt.ylabel('Range (m)') plt.title(f'Range vs Initial Velocity at {theta_deg}\u00b0') plt.grid() plt.savefig(\"range_vs_velocity.png\", dpi=300) plt.show() range_vs_velocity(45, 9.81)","title":"Range vs Initial Velocity at 45\u00b0"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#gymnastics-style-jump-simplified-example","text":"import math # Gymnastics jump simulation v0 = 4 # initial velocity (m/s) angle = 50 # launch angle (degrees) g = 9.81 # gravity (m/s^2) theta = math.radians(angle) t = (2 * v0 * math.sin(theta)) / g R = (v0**2 * math.sin(2 * theta)) / g print(\"Time in air:\", round(t, 2), \"s\") print(\"Distance:\", round(R, 2), \"m\") # Calculate maximum height h_max = (v0**2 * math.sin(theta)**2) / (2 * g) print(\"Maximum height:\", round(h_max, 2), \"m\") This is a short example of how angle and velocity affect the flight time and distance of a jump, like in gymnastics.","title":"Gymnastics-Style Jump (Simplified Example)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-discussion-on-limitations","text":"Air Resistance: In real scenarios, drag significantly reduces range. Uneven Terrain: Changes in landing elevation affect results. Wind Influence: Can alter trajectory unpredictably.","title":"5. Discussion on Limitations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#6-examples","text":"Figure 1: Illustration showing how launch angle and velocity affect the range of projectile motion. Figure 2: Simulated projectile paths at 45\u00b0 launch angle with different initial velocities. Figure 3: Simulated projectile paths at 15,45,75\u00b0 launch angle with different initial velocities.","title":"6. Examples"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#conclusion","text":"This analysis demonstrates the relationship between launch angle and range, emphasizing its significance in various real-world applications. It also helped me connect what I\u2019m learning now to the years I spent doing gymnastics. Future studies can include more realistic factors like air resistance and body posture during motion. visit my colab","title":"Conclusion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2: Investigating the Dynamics of a Forced Damped Pendulum Motivation The forced damped pendulum is a captivating example of a physical system with intricate behavior resulting from the interplay of damping , restoring forces , and external driving forces . By introducing both damping and external periodic forcing, the system demonstrates a transition from simple harmonic motion to a rich spectrum of dynamics, including: Resonance Chaos Quasiperiodic behavior These phenomena form the foundation for understanding complex real-world systems such as: - Driven oscillators - Climate systems - Mechanical structures under periodic stress The introduction of forcing adds new parameters, like amplitude and frequency of the external force, significantly affecting the system's behavior. Varying these parameters leads to diverse behaviors: - Synchronized oscillations - Resonance - Chaotic motion These principles are widely used in engineering applications such as: - Energy harvesting - Vibration isolation - Mechanical resonance analysis Task 1. Theoretical Foundation The equation governing the motion of a forced damped pendulum is: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L} \\sin(\\theta) = A \\cos(\\omega t) \\] Small-Angle Approximation For small angular displacements ( \\( \\theta \\ll 1 \\) ), we approximate: \\[ \\sin(\\theta) \\approx \\theta \\] Thus, the equation becomes: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L} \\theta = A \\cos(\\omega t) \\] This is a linear second-order ODE. Its general solution consists of: \\[ \\theta(t) = \\theta_{\\text{hom}}(t) + \\theta_{\\text{part}}(t) \\] \\( \\theta_{\\text{hom}}(t) \\) : homogeneous (damped) solution \\( \\theta_{\\text{part}}(t) \\) : particular (forced) solution Resonance If the driving frequency \\( \\omega \\) approaches the natural frequency \\( \\omega_0 = \\sqrt{g/L} \\) , the system exhibits resonance , where oscillation amplitude grows significantly, especially for low damping \\( b \\) . This is critical in engineering design to avoid destructive oscillations. 2. Analysis of Dynamics Investigate how varying: - Damping coefficient \\( b \\) - Driving amplitude \\( A \\) - Driving frequency \\( \\omega \\) affects the pendulum's motion. Focus on transitions between: Periodic motion Quasiperiodic motion Chaotic motion Insight : - Increasing \\( A \\) or decreasing \\( b \\) may push the system from periodic to chaotic behavior. - Stronger damping reduces amplitude and prevents instability. 3. Practical Applications The forced damped pendulum model applies to several real-world systems, including: - Energy harvesting devices (e.g., vibrations in vehicles or bridges) - Suspension bridges under periodic wind loads - Driven RLC circuits in electrical systems - Biomechanical systems , such as human gait analysis 4. Implementation We simulate the pendulum using Python and visualize the results through various plots. Example Python Implementation Comparison of Three Pendulum Scenarios The figure below presents three different cases of pendulum motion: Simple Pendulum (no damping, no forcing) Damped Pendulum (with damping only) Forced Pendulum (damping + external force) Each row shows: - Left: Time series of the angle (\u03b8 vs time) - Right: Corresponding phase diagram (\u03b8 vs \u03c9) This comparison helps visualize how damping and external forcing impact the system's dynamics. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters b = 0.5 # Damping coefficient g = 9.81 # Gravitational acceleration (m/s^2) L = 1.0 # Length of pendulum (m) A = 1.2 # Driving force amplitude w = 2.0 # Driving frequency (rad/s) # ODE System def pendulum(t, y): theta, omega = y dtheta_dt = omega domega_dt = -b * omega - (g / L) * np.sin(theta) + A * np.cos(w * t) return [dtheta_dt, domega_dt] # Time domain and initial conditions t = np.linspace(0, 50, 1000) y0 = [0.1, 0.0] # Initial angle and angular velocity # Numerical solution sol = solve_ivp(pendulum, [t[0], t[-1]], y0, t_eval=t) # Angle vs Time plt.figure() plt.plot(sol.t, sol.y[0]) plt.title(\"Forced Damped Pendulum: Angle vs Time\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (rad)\") plt.grid(True) plt.show() This graph shows how the angle of the forced damped pendulum evolves over time. Angle vs Time \u2013 Resonance Behavior This plot shows large and regular oscillations due to resonance. The system absorbs energy efficiently from the external force, resulting in high-amplitude, periodic motion. It represents a typical resonant response with minimal damping and driving frequency close to natural frequency. Angular Velocity vs Time The following graph illustrates how the angular velocity of the forced damped pendulum changes over time. This visualization helps understand how damping and external driving forces affect the rotational speed (\u03c9) of the pendulum. Kinetic vs Potential Energy This plot compares the kinetic and potential energy of the pendulum. Total Energy Loss Over Time (Log Scale) This log-scaled graph shows how the total mechanical energy of the system decreases over time due to damping. Parametric Curve: \u03b8 vs \u03c9 This graph visualizes the relationship between angular displacement (\u03b8) and angular velocity (\u03c9) over time, forming a parametric curve. # Phase Diagram: \u03b8 vs \u03c9 plt.figure() plt.plot(sol.y[0], sol.y[1]) plt.title(\"Phase Diagram: \u03b8 vs \u03c9\") plt.xlabel(\"Angle (rad)\") plt.ylabel(\"Angular Velocity (rad/s)\") plt.grid(True) plt.show() This phase diagram shows the relationship between angular displacement and angular velocity, helping us understand the system\u2019s dynamics (e.g. chaotic behavior). Phase Diagram \u2013 Chaotic Behavior This phase diagram illustrates the system's behavior under chaotic conditions. In this scenario, the damping coefficient ( b = 0.5 ) and driving amplitude ( A = 1.2 ) are set to values that push the pendulum into a nonlinear, unpredictable regime. The diagram shows a dense and non-repeating pattern, which is a hallmark of chaos. Such behavior is highly sensitive to initial conditions and does not settle into a stable orbit. Phase Diagram \u2013 Resonance Behavior This phase diagram shows the response of the system near its natural frequency, producing resonance. With low damping ( b = 0.1 ) and a driving frequency approximately equal to the system\u2019s natural frequency ( \u03c9 \u2248 \u221a(g/L) ), the pendulum absorbs energy efficiently. This results in large, smooth, and repeating loops in phase space \u2013 a characteristic of resonant oscillations. The motion is regular and periodic, unlike the chaotic case. # Total Mechanical Energy theta, omega = sol.y kinetic = 0.5 * (L**2) * omega**2 potential = g * L * (1 - np.cos(theta)) total_energy = kinetic + potential plt.figure() plt.plot(sol.t, total_energy) plt.title(\"Total Mechanical Energy vs Time\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Energy (Joules)\") plt.grid(True) plt.show() This graph displays the total mechanical energy (kinetic + potential) of the system over time. Poincar\u00e9 Section (sampled at driving period intervals) T = 2 * np.pi / w poincare_theta = [] poincare_omega = [] for i in range(len(sol.t)): if np.isclose(sol.t[i] % T, 0, atol=0.05): poincare_theta.append(sol.y[0][i]) poincare_omega.append(sol.y[1][i]) plt.figure() plt.scatter(poincare_theta, poincare_omega, s=10, color='darkred') plt.title(\"Poincar\u00e9 Section\") plt.xlabel(\"\u03b8 (rad)\") plt.ylabel(\"\u03c9 (rad/s)\") plt.grid(True) plt.show() This graph visualizes the system's state at specific time intervals, helping identify whether the system is chaotic or periodic. Deliverables A Markdown document or Jupyter notebook implementing the simulation. A theoretical explanation including the small-angle approximation and resonance effects. Plots illustrating: Time evolution of angle Phase diagrams Energy over time Poincar\u00e9 sections A discussion on: Transition from periodic to chaotic motion Effects of damping and forcing parameters Optional extensions: Bifurcation diagrams Nonlinear damping Stochastic or aperiodic driving forces Hints and Resources Use the small-angle approximation: \\[ \\sin(\\theta) \\approx \\theta \\quad \\text{(for small angles)} \\] Apply numerical integration techniques (e.g., Runge-Kutta 4 or solve_ivp ) to solve the ODE. Recommended libraries: numpy for numerical operations scipy.integrate for solving differential equations matplotlib for visualization Analogous systems for further exploration: Driven RLC circuits in electrical engineering Biomechanical modeling of periodic limb motion visit my colab","title":"Problem 2: Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2-investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Problem 2: Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#motivation","text":"The forced damped pendulum is a captivating example of a physical system with intricate behavior resulting from the interplay of damping , restoring forces , and external driving forces . By introducing both damping and external periodic forcing, the system demonstrates a transition from simple harmonic motion to a rich spectrum of dynamics, including: Resonance Chaos Quasiperiodic behavior These phenomena form the foundation for understanding complex real-world systems such as: - Driven oscillators - Climate systems - Mechanical structures under periodic stress The introduction of forcing adds new parameters, like amplitude and frequency of the external force, significantly affecting the system's behavior. Varying these parameters leads to diverse behaviors: - Synchronized oscillations - Resonance - Chaotic motion These principles are widely used in engineering applications such as: - Energy harvesting - Vibration isolation - Mechanical resonance analysis","title":"Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#task","text":"","title":"Task"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"The equation governing the motion of a forced damped pendulum is: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L} \\sin(\\theta) = A \\cos(\\omega t) \\]","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"For small angular displacements ( \\( \\theta \\ll 1 \\) ), we approximate: \\[ \\sin(\\theta) \\approx \\theta \\] Thus, the equation becomes: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L} \\theta = A \\cos(\\omega t) \\] This is a linear second-order ODE. Its general solution consists of: \\[ \\theta(t) = \\theta_{\\text{hom}}(t) + \\theta_{\\text{part}}(t) \\] \\( \\theta_{\\text{hom}}(t) \\) : homogeneous (damped) solution \\( \\theta_{\\text{part}}(t) \\) : particular (forced) solution","title":"Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance","text":"If the driving frequency \\( \\omega \\) approaches the natural frequency \\( \\omega_0 = \\sqrt{g/L} \\) , the system exhibits resonance , where oscillation amplitude grows significantly, especially for low damping \\( b \\) . This is critical in engineering design to avoid destructive oscillations.","title":"Resonance"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"Investigate how varying: - Damping coefficient \\( b \\) - Driving amplitude \\( A \\) - Driving frequency \\( \\omega \\) affects the pendulum's motion. Focus on transitions between: Periodic motion Quasiperiodic motion Chaotic motion Insight : - Increasing \\( A \\) or decreasing \\( b \\) may push the system from periodic to chaotic behavior. - Stronger damping reduces amplitude and prevents instability.","title":"2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"The forced damped pendulum model applies to several real-world systems, including: - Energy harvesting devices (e.g., vibrations in vehicles or bridges) - Suspension bridges under periodic wind loads - Driven RLC circuits in electrical systems - Biomechanical systems , such as human gait analysis","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-implementation","text":"We simulate the pendulum using Python and visualize the results through various plots.","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#example-python-implementation","text":"","title":"Example Python Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#comparison-of-three-pendulum-scenarios","text":"The figure below presents three different cases of pendulum motion: Simple Pendulum (no damping, no forcing) Damped Pendulum (with damping only) Forced Pendulum (damping + external force) Each row shows: - Left: Time series of the angle (\u03b8 vs time) - Right: Corresponding phase diagram (\u03b8 vs \u03c9) This comparison helps visualize how damping and external forcing impact the system's dynamics. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters b = 0.5 # Damping coefficient g = 9.81 # Gravitational acceleration (m/s^2) L = 1.0 # Length of pendulum (m) A = 1.2 # Driving force amplitude w = 2.0 # Driving frequency (rad/s) # ODE System def pendulum(t, y): theta, omega = y dtheta_dt = omega domega_dt = -b * omega - (g / L) * np.sin(theta) + A * np.cos(w * t) return [dtheta_dt, domega_dt] # Time domain and initial conditions t = np.linspace(0, 50, 1000) y0 = [0.1, 0.0] # Initial angle and angular velocity # Numerical solution sol = solve_ivp(pendulum, [t[0], t[-1]], y0, t_eval=t) # Angle vs Time plt.figure() plt.plot(sol.t, sol.y[0]) plt.title(\"Forced Damped Pendulum: Angle vs Time\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (rad)\") plt.grid(True) plt.show() This graph shows how the angle of the forced damped pendulum evolves over time.","title":"Comparison of Three Pendulum Scenarios"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#angle-vs-time-resonance-behavior","text":"This plot shows large and regular oscillations due to resonance. The system absorbs energy efficiently from the external force, resulting in high-amplitude, periodic motion. It represents a typical resonant response with minimal damping and driving frequency close to natural frequency.","title":"Angle vs Time \u2013 Resonance Behavior"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#angular-velocity-vs-time","text":"The following graph illustrates how the angular velocity of the forced damped pendulum changes over time. This visualization helps understand how damping and external driving forces affect the rotational speed (\u03c9) of the pendulum.","title":"Angular Velocity vs Time"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#kinetic-vs-potential-energy","text":"This plot compares the kinetic and potential energy of the pendulum.","title":"Kinetic vs Potential Energy"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#total-energy-loss-over-time-log-scale","text":"This log-scaled graph shows how the total mechanical energy of the system decreases over time due to damping.","title":"Total Energy Loss Over Time (Log Scale)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parametric-curve-vs","text":"This graph visualizes the relationship between angular displacement (\u03b8) and angular velocity (\u03c9) over time, forming a parametric curve. # Phase Diagram: \u03b8 vs \u03c9 plt.figure() plt.plot(sol.y[0], sol.y[1]) plt.title(\"Phase Diagram: \u03b8 vs \u03c9\") plt.xlabel(\"Angle (rad)\") plt.ylabel(\"Angular Velocity (rad/s)\") plt.grid(True) plt.show() This phase diagram shows the relationship between angular displacement and angular velocity, helping us understand the system\u2019s dynamics (e.g. chaotic behavior).","title":"Parametric Curve: \u03b8 vs \u03c9"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#phase-diagram-chaotic-behavior","text":"This phase diagram illustrates the system's behavior under chaotic conditions. In this scenario, the damping coefficient ( b = 0.5 ) and driving amplitude ( A = 1.2 ) are set to values that push the pendulum into a nonlinear, unpredictable regime. The diagram shows a dense and non-repeating pattern, which is a hallmark of chaos. Such behavior is highly sensitive to initial conditions and does not settle into a stable orbit.","title":"Phase Diagram \u2013 Chaotic Behavior"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#phase-diagram-resonance-behavior","text":"This phase diagram shows the response of the system near its natural frequency, producing resonance. With low damping ( b = 0.1 ) and a driving frequency approximately equal to the system\u2019s natural frequency ( \u03c9 \u2248 \u221a(g/L) ), the pendulum absorbs energy efficiently. This results in large, smooth, and repeating loops in phase space \u2013 a characteristic of resonant oscillations. The motion is regular and periodic, unlike the chaotic case. # Total Mechanical Energy theta, omega = sol.y kinetic = 0.5 * (L**2) * omega**2 potential = g * L * (1 - np.cos(theta)) total_energy = kinetic + potential plt.figure() plt.plot(sol.t, total_energy) plt.title(\"Total Mechanical Energy vs Time\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Energy (Joules)\") plt.grid(True) plt.show() This graph displays the total mechanical energy (kinetic + potential) of the system over time.","title":"Phase Diagram \u2013 Resonance Behavior"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#poincare-section-sampled-at-driving-period-intervals","text":"T = 2 * np.pi / w poincare_theta = [] poincare_omega = [] for i in range(len(sol.t)): if np.isclose(sol.t[i] % T, 0, atol=0.05): poincare_theta.append(sol.y[0][i]) poincare_omega.append(sol.y[1][i]) plt.figure() plt.scatter(poincare_theta, poincare_omega, s=10, color='darkred') plt.title(\"Poincar\u00e9 Section\") plt.xlabel(\"\u03b8 (rad)\") plt.ylabel(\"\u03c9 (rad/s)\") plt.grid(True) plt.show() This graph visualizes the system's state at specific time intervals, helping identify whether the system is chaotic or periodic.","title":"Poincar\u00e9 Section (sampled at driving period intervals)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#deliverables","text":"A Markdown document or Jupyter notebook implementing the simulation. A theoretical explanation including the small-angle approximation and resonance effects. Plots illustrating: Time evolution of angle Phase diagrams Energy over time Poincar\u00e9 sections A discussion on: Transition from periodic to chaotic motion Effects of damping and forcing parameters Optional extensions: Bifurcation diagrams Nonlinear damping Stochastic or aperiodic driving forces","title":"Deliverables"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#hints-and-resources","text":"Use the small-angle approximation: \\[ \\sin(\\theta) \\approx \\theta \\quad \\text{(for small angles)} \\] Apply numerical integration techniques (e.g., Runge-Kutta 4 or solve_ivp ) to solve the ODE. Recommended libraries: numpy for numerical operations scipy.integrate for solving differential equations matplotlib for visualization Analogous systems for further exploration: Driven RLC circuits in electrical engineering Biomechanical modeling of periodic limb motion visit my colab","title":"Hints and Resources"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 Orbital Period and Orbital Radius Motivation \"Kepler's Third Law\" links the square of the orbital period with the cube of the orbital radius, forming a cornerstone of celestial mechanics. Purpose: Understand planetary motions and gravitational interactions from satellites to cosmic scales. Goal: Connect fundamental principles of gravity to real-world phenomena like satellite orbits and planetary systems. Derivation of Kepler\u2019s Third Law Starting from Newton's Law of Universal Gravitation: \\[ F_{gravity} = \\frac{GMm}{r^2} \\] and the centripetal force required for circular motion: \\[ F_{centripetal} = \\frac{mv^2}{r} \\] Equating the two forces: \\[ \\frac{GMm}{r^2} = \\frac{mv^2}{r} \\] Simplifying: \\[ v^2 = \\frac{GM}{r} \\] The orbital period \\(T\\) is related to \\(v\\) as: \\[ v = \\frac{2\\pi r}{T} \\] Substituting: \\[ \\left( \\frac{2\\pi r}{T} \\right)^2 = \\frac{GM}{r} \\] Expanding: \\[ \\frac{4\\pi^2 r^2}{T^2} = \\frac{GM}{r} \\] Cross-multiplying: \\[ 4\\pi^2 r^3 = GMT^2 \\] Finally, solving for \\(T^2\\) : \\[ T^2 = \\frac{4\\pi^2}{GM} r^3 \\] For elliptical orbits, replace \\(r\\) with \\(a\\) (semi-major axis): \\[ T^2 = \\frac{4\\pi^2}{GM} a^3 \\] Task List Derive the relationship between the square of the orbital period and the cube of the orbital radius for circular orbits. Discuss the implications of this relationship for astronomy, including its role in calculating planetary masses and distances. Analyze real-world examples, such as the Moon\u2019s orbit around Earth or the orbits of planets in the Solar System. Implement a computational model to simulate circular orbits and verify the relationship. Deliverables A Markdown document containing explanations and Python code. A detailed explanation of orbital mechanics and Kepler\u2019s Third Law. Graphical representations generated from simulations and real data. A discussion on how this relationship extends to elliptical orbits and other celestial bodies. Graphs Section Graph 1: Kepler's Third Law (T\u00b2 vs r\u00b3) import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 M = 1.989e30 radii = np.linspace(5e10, 1e12, 100) periods = 2 * np.pi * np.sqrt(radii**3 / (G * M)) plt.figure(figsize=(8,6)) plt.plot(radii**3, periods**2, 'o') plt.xlabel('Orbital Radius Cubed (r\u00b3) [m\u00b3]') plt.ylabel('Orbital Period Squared (T\u00b2) [s\u00b2]') plt.title(\"Kepler's Third Law: T\u00b2 vs r\u00b3\") plt.grid(True) plt.tight_layout() plt.savefig('kepler_third_law_graph.png') plt.show() Graph 2: Orbital Radius vs Orbital Period plt.figure(figsize=(8,6)) plt.plot(radii, periods, 'o') plt.xlabel('Orbital Radius (r) [m]') plt.ylabel('Orbital Period (T) [s]') plt.title('Orbital Radius vs Orbital Period') plt.grid(True) plt.tight_layout() plt.savefig('orbital_radius_vs_period.png') plt.show() Graph 3: Log-Log Plot plt.figure(figsize=(8,6)) plt.plot(np.log(radii), np.log(periods), 'o') plt.xlabel('log(Orbital Radius) [log(m)]') plt.ylabel('log(Orbital Period) [log(s)]') plt.title('Log-Log Plot: log(T) vs log(r)') plt.grid(True) plt.tight_layout() plt.savefig('log_log_plot.png') plt.show() Graph 4: Orbital Velocity vs Orbital Radius velocities = np.sqrt(G * M / radii) plt.figure(figsize=(8,6)) plt.plot(radii, velocities, 'o') plt.xlabel('Orbital Radius (r) [m]') plt.ylabel('Orbital Velocity (v) [m/s]') plt.title('Orbital Velocity vs Orbital Radius') plt.grid(True) plt.tight_layout() plt.savefig('velocity_vs_radius.png') plt.show()","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-period-and-orbital-radius","text":"","title":"Orbital Period and Orbital Radius"},{"location":"1%20Physics/2%20Gravity/Problem_1/#motivation","text":"\"Kepler's Third Law\" links the square of the orbital period with the cube of the orbital radius, forming a cornerstone of celestial mechanics. Purpose: Understand planetary motions and gravitational interactions from satellites to cosmic scales. Goal: Connect fundamental principles of gravity to real-world phenomena like satellite orbits and planetary systems.","title":"Motivation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#derivation-of-keplers-third-law","text":"Starting from Newton's Law of Universal Gravitation: \\[ F_{gravity} = \\frac{GMm}{r^2} \\] and the centripetal force required for circular motion: \\[ F_{centripetal} = \\frac{mv^2}{r} \\] Equating the two forces: \\[ \\frac{GMm}{r^2} = \\frac{mv^2}{r} \\] Simplifying: \\[ v^2 = \\frac{GM}{r} \\] The orbital period \\(T\\) is related to \\(v\\) as: \\[ v = \\frac{2\\pi r}{T} \\] Substituting: \\[ \\left( \\frac{2\\pi r}{T} \\right)^2 = \\frac{GM}{r} \\] Expanding: \\[ \\frac{4\\pi^2 r^2}{T^2} = \\frac{GM}{r} \\] Cross-multiplying: \\[ 4\\pi^2 r^3 = GMT^2 \\] Finally, solving for \\(T^2\\) : \\[ T^2 = \\frac{4\\pi^2}{GM} r^3 \\] For elliptical orbits, replace \\(r\\) with \\(a\\) (semi-major axis): \\[ T^2 = \\frac{4\\pi^2}{GM} a^3 \\]","title":"Derivation of Kepler\u2019s Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#task-list","text":"Derive the relationship between the square of the orbital period and the cube of the orbital radius for circular orbits. Discuss the implications of this relationship for astronomy, including its role in calculating planetary masses and distances. Analyze real-world examples, such as the Moon\u2019s orbit around Earth or the orbits of planets in the Solar System. Implement a computational model to simulate circular orbits and verify the relationship.","title":"Task List"},{"location":"1%20Physics/2%20Gravity/Problem_1/#deliverables","text":"A Markdown document containing explanations and Python code. A detailed explanation of orbital mechanics and Kepler\u2019s Third Law. Graphical representations generated from simulations and real data. A discussion on how this relationship extends to elliptical orbits and other celestial bodies.","title":"Deliverables"},{"location":"1%20Physics/2%20Gravity/Problem_1/#graphs-section","text":"","title":"Graphs Section"},{"location":"1%20Physics/2%20Gravity/Problem_1/#graph-1-keplers-third-law-t2-vs-r3","text":"import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 M = 1.989e30 radii = np.linspace(5e10, 1e12, 100) periods = 2 * np.pi * np.sqrt(radii**3 / (G * M)) plt.figure(figsize=(8,6)) plt.plot(radii**3, periods**2, 'o') plt.xlabel('Orbital Radius Cubed (r\u00b3) [m\u00b3]') plt.ylabel('Orbital Period Squared (T\u00b2) [s\u00b2]') plt.title(\"Kepler's Third Law: T\u00b2 vs r\u00b3\") plt.grid(True) plt.tight_layout() plt.savefig('kepler_third_law_graph.png') plt.show()","title":"Graph 1: Kepler's Third Law (T\u00b2 vs r\u00b3)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#graph-2-orbital-radius-vs-orbital-period","text":"plt.figure(figsize=(8,6)) plt.plot(radii, periods, 'o') plt.xlabel('Orbital Radius (r) [m]') plt.ylabel('Orbital Period (T) [s]') plt.title('Orbital Radius vs Orbital Period') plt.grid(True) plt.tight_layout() plt.savefig('orbital_radius_vs_period.png') plt.show()","title":"Graph 2: Orbital Radius vs Orbital Period"},{"location":"1%20Physics/2%20Gravity/Problem_1/#graph-3-log-log-plot","text":"plt.figure(figsize=(8,6)) plt.plot(np.log(radii), np.log(periods), 'o') plt.xlabel('log(Orbital Radius) [log(m)]') plt.ylabel('log(Orbital Period) [log(s)]') plt.title('Log-Log Plot: log(T) vs log(r)') plt.grid(True) plt.tight_layout() plt.savefig('log_log_plot.png') plt.show()","title":"Graph 3: Log-Log Plot"},{"location":"1%20Physics/2%20Gravity/Problem_1/#graph-4-orbital-velocity-vs-orbital-radius","text":"velocities = np.sqrt(G * M / radii) plt.figure(figsize=(8,6)) plt.plot(radii, velocities, 'o') plt.xlabel('Orbital Radius (r) [m]') plt.ylabel('Orbital Velocity (v) [m/s]') plt.title('Orbital Velocity vs Orbital Radius') plt.grid(True) plt.tight_layout() plt.savefig('velocity_vs_radius.png') plt.show()","title":"Graph 4: Orbital Velocity vs Orbital Radius"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}